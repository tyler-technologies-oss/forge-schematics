// This code was generated by the angular-custom-elements-schematic.  Any changes will be overwritten next time it runs.
import { Component, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, NgZone, Input } from '@angular/core';
import { <%= name %> as <%= name %>CustomElement } from '<%= importPath %>';

<%= toJsDocBlock(description) %>
@Component({
  selector: '<%= tagName %>',
  changeDetection: ChangeDetectionStrategy.OnPush,
  template: '<ng-content></ng-content>'
})
export class <%= name %> {
<% for (let property of properties) { %>
<% if (property.description) { %><%= toJsDocBlock(property.description, 1) %><% } %>
	@Input()
	public set <%= property.name %>(value: <%= name %>CustomElement['<%= property.name %>']<% if (property.type?.text === 'boolean') {
		%> | string<%
	} else if (property.type?.text === 'number') {
		%> | string<%
	}%>) {
		this.zone.runOutsideAngular(() => {
			this.elementRef.nativeElement.<%= property.name %> = <% if (property.type?.text === 'boolean') {
				%>value != null && `${value}` !== 'false'<%
			} else if (property.type?.text === 'number') {
				%>+value<%
			} else {
				%>value<%
			} %>;
		});
	}

	public get <%= property.name %>(): <%= name %>CustomElement['<%= property.name %>'] {
		return this.elementRef.nativeElement.<%= property.name %>;
	}
<% } %><% for (let method of methods) { %>
<% if (method.description) { %><%= toJsDocBlock(method.description, 1) %><% } %>
	public <%= method.name %>(...args: Parameters<<%= name %>CustomElement['<%= method.name %>']>): ReturnType<<%= name %>CustomElement['<%= method.name %>']> {
		return this.zone.runOutsideAngular(() => this.elementRef.nativeElement.<%= method.name %>(...args));
	}
<% } %>
	constructor(
		changeDetectorRef: ChangeDetectorRef,
		protected elementRef: ElementRef<<%= name %>CustomElement>,
		protected zone: NgZone
	) {
		if (!window.customElements.get('<%= tagName %>')) {
			window.customElements.define('<%= tagName %>', <%= name %>CustomElement);
		}
		changeDetectorRef.detach();
	}
}
